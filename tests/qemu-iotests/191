#!/usr/bin/env python
#
# Tests that the legacy throttling interface using an implicit throttle filter
# driver node works
#
# Copyright (C) 2017 Manos Pitsidianakis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import iotests

class TestLegacyThrottling(iotests.QMPTestCase):
    test_img = os.path.join(iotests.test_dir, "test.img")
    target_img = os.path.join(iotests.test_dir, "target.img")
    base_img = os.path.join(iotests.test_dir, "base.img")

    def setUp(self):
        iotests.qemu_img("create", "-f", iotests.imgfmt, self.base_img, "1G")
        iotests.qemu_img("create", "-f", iotests.imgfmt, self.test_img, "-b", self.base_img)
        iotests.qemu_io("-f", iotests.imgfmt, "-c", "write -P0x5d 1M 128M", self.test_img)
        self.vm = iotests.VM().add_drive(self.test_img)
        self.vm.launch()

    def tearDown(self):
        self.do_check_throttle_node(expect=True)
        params = {"device": "drive0",
                  "bps": 0,
                  "bps_rd": 0,
                  "bps_wr": 0,
                  "iops": 0,
                  "iops_rd": 0,
                  "iops_wr": 0,
                 }
        """
        This must remove the implicit throttle_node
        """
        result = self.vm.qmp("block_set_io_throttle", conv_keys=False,
                             **params)
        self.do_check_throttle_node(expect=False)
        self.vm.shutdown()

    def do_test_job(self, cmd, **args):
        params = {"device": "drive0",
                  "bps": 1024,
                  "bps_rd": 0,
                  "bps_wr": 0,
                  "iops": 0,
                  "iops_rd": 0,
                  "iops_wr": 0,
                 }
        result = self.vm.qmp("block_set_io_throttle", conv_keys=False,
                             **params)
        self.assert_qmp(result, "return", {})
        result = self.vm.qmp(cmd, **args)
        self.assert_qmp(result, "return", {})
        result = self.vm.qmp("query-block-jobs")
        self.assert_qmp(result, "return[0]/device", "drive0")

    def do_check_throttle_node(self, expect):
        result = self.vm.qmp("query-named-block-nodes")
        for r in result["return"]:
            if r["drv"] == "throttle":
                    self.assertTrue(expect)
                    return
        if expect:
            """ throttle_node missing! """
            self.assertTrue(False)

    def do_check_params(self, file):
        result = self.vm.qmp("query-block")
        self.assert_qmp(result, "return[0]/inserted/bps", 1024)
        self.assert_qmp(result, "return[0]/inserted/drv", iotests.imgfmt)
        self.assert_qmp(result, "return[0]/inserted/file", file)

    """
    Check that query-block reports the correct throttling parameters while
    ignoring the implicit throttle node.
    """
    def test_query_block(self):
        params = {"device": "drive0",
                  "bps": 1024,
                  "bps_rd": 0,
                  "bps_wr": 0,
                  "iops": 0,
                  "iops_rd": 0,
                  "iops_wr": 0,
                 }
        result = self.vm.qmp("block_set_io_throttle", conv_keys=False,
                             **params)
        self.assert_qmp(result, "return", {})
        self.do_check_params(file=self.test_img)

    """
    Check that the throttle node doesn't get removed by block jobs, and that
    query-block reports the correct throttling parameters
    """
    def test_drive_mirror(self):
        self.do_test_job("drive-mirror", device="drive0",
                          target=self.target_img,
                          sync="full")
        self.vm.event_wait("BLOCK_JOB_READY")
        self.vm.qmp("block-job-complete", device="drive0")
        """
        query-block should report `target_img` now
        """
        self.do_check_params(file=self.target_img)

    def test_drive_backup(self):
        self.do_test_job("drive-backup", device="drive0",
                          target=self.target_img,
                          sync="full")
        self.vm.event_wait("BLOCK_JOB_COMPLETED")
        self.do_check_params(file=self.test_img)

    def test_block_commit(self):
        self.do_test_job("block-commit", device="drive0")
        self.vm.event_wait("BLOCK_JOB_READY")
        self.vm.qmp("block-job-complete", device="drive0")
        """
        query-block should report the backing file `base_img` now
        """
        self.do_check_params(file=self.base_img)

if __name__ == "__main__":
    iotests.main(supported_fmts=["qcow2"])
